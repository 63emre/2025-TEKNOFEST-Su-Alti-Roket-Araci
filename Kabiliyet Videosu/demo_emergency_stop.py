#!/usr/bin/env python3
"""
TEKNOFEST Su Altƒ± Roket Aracƒ± - Acil Durdurma Sistemi Demo
Video √ßekimi i√ßin acil durdurma butonunun √ßalƒ±≈ütƒ±ƒüƒ±nƒ± g√∂sterme
≈ûartname: Butona basƒ±ldƒ±ƒüƒ±nda motorlarƒ±n durmasƒ± ve sistemin kapanmasƒ±
"""

import time
import threading
import signal
import sys
from datetime import datetime
from pymavlink import mavutil
import RPi.GPIO as GPIO
import json

# MAVLink baƒülantƒ± adresi
MAV_ADDRESS = 'tcp:127.0.0.1:5777'

# GPIO pinleri
EMERGENCY_BUTTON_PIN = 19    # Acil durdurma butonu
STATUS_LED_PIN = 20          # Durum LED'i
SYSTEM_POWER_PIN = 21        # Sistem g√º√ß r√∂lesi

# Sistem kanallarƒ±
MOTOR_CHANNEL = 8
SERVO_CHANNELS = [1, 2, 3, 4]  # Fin servolar
PAYLOAD_SERVO = 9

# PWM deƒüerleri
PWM_NEUTRAL = 1500
PWM_MIN = 1000
PWM_MAX = 2000

class EmergencyStopDemo:
    def __init__(self):
        self.master = None
        self.connected = False
        self.demo_active = False
        
        # Sistem durumu
        self.system_powered = False
        self.motors_active = False
        self.emergency_triggered = False
        self.emergency_button_pressed = False
        
        # Demo durumu
        self.demo_stage = "PREPARATION"
        self.demo_start_time = None
        self.emergency_trigger_time = None
        
        # Test verileri
        self.motor_stop_time = None
        self.system_shutdown_time = None
        self.button_press_count = 0
        
        # Performance metrikler
        self.motor_stop_delay = 0.0    # Buton basƒ±mƒ± -> motor durdurma s√ºresi
        self.system_shutdown_delay = 0.0  # Buton basƒ±mƒ± -> tam sistem kapanma s√ºresi
        
        # Test log
        self.emergency_log = []
        self.telemetry_data = []
        
        # Threading
        self.monitoring_thread = None
        self.running = False
        
        # GPIO setup
        self.setup_gpio()
        
    def setup_gpio(self):
        """GPIO pinlerini kur"""
        try:
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)
            
            # Input pins (pull-up with debounce)
            GPIO.setup(EMERGENCY_BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            
            # Output pins
            GPIO.setup(STATUS_LED_PIN, GPIO.OUT)
            GPIO.setup(SYSTEM_POWER_PIN, GPIO.OUT)
            
            # Ba≈ülangƒ±√ßta sistem a√ßƒ±k
            GPIO.output(STATUS_LED_PIN, GPIO.HIGH)  # LED on
            GPIO.output(SYSTEM_POWER_PIN, GPIO.HIGH)  # System power on
            self.system_powered = True
            
            # Interrupt callback
            GPIO.add_event_detect(EMERGENCY_BUTTON_PIN, GPIO.FALLING,
                                callback=self.emergency_button_callback, 
                                bouncetime=300)
            
            print("üîß GPIO kurulumu tamamlandƒ±")
            return True
            
        except Exception as e:
            print(f"‚ùå GPIO kurulum hatasƒ±: {e}")
            return False
    
    def emergency_button_callback(self, channel):
        """Acil durdurma butonu callback"""
        self.emergency_button_pressed = True
        self.button_press_count += 1
        self.emergency_trigger_time = time.time()
        
        print("\nüö® ACƒ∞L DURDURMA BUTONU BASILDI!")
        print(f"‚è∞ Buton basƒ±m #{self.button_press_count}")
        
        # LED hƒ±zlƒ± yanƒ±p s√∂n (acil durum)
        threading.Thread(target=self.emergency_led_blink, daemon=True).start()
        
        # Acil durdurma prosed√ºr√º ba≈ülat
        threading.Thread(target=self.execute_emergency_stop, daemon=True).start()
    
    def emergency_led_blink(self):
        """Acil durum LED yanƒ±p s√∂nmesi"""
        for _ in range(20):  # 10 saniye hƒ±zlƒ± blink
            GPIO.output(STATUS_LED_PIN, GPIO.LOW)
            time.sleep(0.25)
            GPIO.output(STATUS_LED_PIN, GPIO.HIGH) 
            time.sleep(0.25)
        
        # Final olarak LED s√∂nd√ºr
        GPIO.output(STATUS_LED_PIN, GPIO.LOW)
    
    def connect_pixhawk(self):
        """Pixhawk baƒülantƒ±sƒ± kur"""
        try:
            print("üîå Pixhawk baƒülantƒ±sƒ± kuruluyor...")
            self.master = mavutil.mavlink_connection(MAV_ADDRESS)
            self.master.wait_heartbeat(timeout=10)
            
            self.connected = True
            print("‚úÖ MAVLink baƒülantƒ±sƒ± ba≈üarƒ±lƒ±!")
            return True
            
        except Exception as e:
            print(f"‚ùå Baƒülantƒ± hatasƒ±: {e}")
            return False
    
    def read_sensors(self):
        """Temel sens√∂r verilerini oku"""
        if not self.connected:
            return False
            
        try:
            # Attitude
            attitude_msg = self.master.recv_match(type='ATTITUDE', blocking=False)
            current_roll = current_pitch = current_yaw = 0.0
            if attitude_msg:
                current_roll = math.degrees(attitude_msg.roll) 
                current_pitch = math.degrees(attitude_msg.pitch)
                current_yaw = math.degrees(attitude_msg.yaw)
            
            # VFR HUD (hƒ±z/throttle)
            vfr_msg = self.master.recv_match(type='VFR_HUD', blocking=False)
            current_speed = current_throttle = 0.0
            if vfr_msg:
                current_speed = vfr_msg.groundspeed
                current_throttle = vfr_msg.throttle
            
            # Telemetri kaydƒ±
            timestamp = time.time()
            self.telemetry_data.append({
                'timestamp': timestamp,
                'roll': current_roll,
                'pitch': current_pitch, 
                'yaw': current_yaw,
                'speed': current_speed,
                'throttle': current_throttle,
                'motors_active': self.motors_active,
                'system_powered': self.system_powered,
                'emergency_triggered': self.emergency_triggered,
                'stage': self.demo_stage
            })
            
            return True
            
        except Exception as e:
            print(f"‚ùå Sens√∂r okuma hatasƒ±: {e}")
            return False
    
    def display_emergency_status(self):
        """Acil durdurma durumunu g√∂ster"""
        print("\n" + "="*70)
        print(f"üö® TEKNOFEST - ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ DEMOsu - {self.demo_stage}")
        print("="*70)
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        demo_time = (time.time() - self.demo_start_time) if self.demo_start_time else 0
        
        print(f"‚è∞ Zaman: {timestamp} | Demo S√ºresi: {demo_time:.0f}s")
        print(f"üîò Buton Basƒ±m Sayƒ±sƒ±: {self.button_press_count}")
        
        # Sistem durumu
        system_status = "‚úÖ AKTƒ∞F" if self.system_powered else "üî¥ KAPALI"
        print(f"üí° Sistem Durumu: {system_status}")
        
        motor_status = "üöÄ AKTƒ∞F" if self.motors_active else "‚èπÔ∏è DURDURULDU"
        print(f"üîß Motor Durumu: {motor_status}")
        
        emergency_status = "üö® TETƒ∞KLENDƒ∞" if self.emergency_triggered else "üü¢ HAZIR"
        print(f"üö® Acil Durdurma: {emergency_status}")
        
        # Response times
        if self.motor_stop_delay > 0:
            print(f"‚ö° Motor Durdurma S√ºresi: {self.motor_stop_delay:.2f}s")
            
        if self.system_shutdown_delay > 0:
            print(f"‚è±Ô∏è Sistem Kapanma S√ºresi: {self.system_shutdown_delay:.2f}s")
        
        print("="*70)
    
    def set_motor_throttle(self, throttle_pwm):
        """Motor kontrol√º"""
        if not self.connected or self.emergency_triggered:
            return False
            
        try:
            self.master.mav.command_long_send(
                self.master.target_system,
                self.master.target_component,
                mavutil.mavlink.MAV_CMD_DO_SET_SERVO,
                0,
                MOTOR_CHANNEL, throttle_pwm, 0, 0, 0, 0, 0
            )
            
            self.motors_active = (throttle_pwm != PWM_NEUTRAL)
            return True
        except:
            return False
    
    def set_servo_position(self, channel, pwm_value):
        """Servo kontrol√º"""
        if not self.connected or self.emergency_triggered:
            return False
            
        try:
            self.master.mav.command_long_send(
                self.master.target_system,
                self.master.target_component,
                mavutil.mavlink.MAV_CMD_DO_SET_SERVO,
                0,
                channel, pwm_value, 0, 0, 0, 0, 0
            )
            return True
        except:
            return False
    
    def execute_emergency_stop(self):
        """Acil durdurma prosed√ºr√ºn√º y√ºr√ºt"""
        print("\nüö® ACƒ∞L DURDURMA PROSED√úR√ú BA≈ûLADI")
        print("-"*50)
        
        self.emergency_triggered = True
        
        # 1. Motorlarƒ± derhal durdur
        print("1Ô∏è‚É£ Motorlar durduruluyor...")
        start_time = time.time()
        
        if self.connected:
            self.set_motor_throttle(PWM_NEUTRAL)
        
        self.motors_active = False
        self.motor_stop_time = time.time()
        self.motor_stop_delay = self.motor_stop_time - self.emergency_trigger_time
        
        print(f"   ‚úÖ Motorlar durduruldu ({self.motor_stop_delay:.2f}s)")
        
        # 2. T√ºm servolarƒ± g√ºvenli pozisyona al
        print("2Ô∏è‚É£ Servolar g√ºvenli pozisyona alƒ±nƒ±yor...")
        
        if self.connected:
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL)
            
            # Payload bay kapat
            self.set_servo_position(PAYLOAD_SERVO, PWM_MIN)
        
        time.sleep(0.5)
        print("   ‚úÖ Servolar g√ºvenli pozisyonda")
        
        # 3. Sistem g√º√ß kontrol√º
        print("3Ô∏è‚É£ Sistem g√º√ß kontrol√º...")
        
        # GPIO power relay kontrol√º
        GPIO.output(SYSTEM_POWER_PIN, GPIO.LOW)
        self.system_powered = False
        self.system_shutdown_time = time.time()
        self.system_shutdown_delay = self.system_shutdown_time - self.emergency_trigger_time
        
        print(f"   ‚úÖ Sistem g√ºc√º kesildi ({self.system_shutdown_delay:.2f}s)")
        
        # 4. MAVLink baƒülantƒ±sƒ±nƒ± kapat
        print("4Ô∏è‚É£ Haberle≈üme baƒülantƒ±larƒ± kapatƒ±lƒ±yor...")
        
        if self.master:
            try:
                self.master.close()
                self.connected = False
                print("   ‚úÖ MAVLink baƒülantƒ±sƒ± kapatƒ±ldƒ±")
            except:
                print("   ‚ö†Ô∏è MAVLink baƒülantƒ±sƒ± zaten kapalƒ±")
        
        # 5. Emergency log kaydet
        self.emergency_log.append({
            'timestamp': self.emergency_trigger_time,
            'button_press_count': self.button_press_count,
            'motor_stop_delay': self.motor_stop_delay,
            'system_shutdown_delay': self.system_shutdown_delay,
            'emergency_successful': True
        })
        
        print("\n‚úÖ ACƒ∞L DURDURMA PROSED√úR√ú TAMAMLANDI!")
        print(f"üìä Motor durdurma: {self.motor_stop_delay:.2f}s")
        print(f"üìä Sistem kapanma: {self.system_shutdown_delay:.2f}s")
    
    def monitoring_loop(self):
        """S√ºrekli izleme d√∂ng√ºs√º"""
        while self.running and self.demo_active:
            self.read_sensors()
            
            # Her 2 saniyede durum g√∂ster (acil durdurma √∂ncesi)
            if not self.emergency_triggered and len(self.telemetry_data) % 20 == 0:
                self.display_emergency_status()
            
            # Acil durdurma tetiklendiyse monitoring'i durdur
            if self.emergency_triggered:
                break
                
            time.sleep(0.1)  # 10Hz
    
    def simulate_normal_operation(self, duration=30):
        """Normal operasyon sim√ºlasyonu"""
        print(f"\nüöÄ NORMAL OPERASYON Sƒ∞M√úLASYONU ({duration}s)")
        print("-"*50)
        print("üìã Bu a≈üamada sistem normal √ßalƒ±≈üƒ±r, butonun basƒ±lmasƒ±nƒ± bekler")
        
        self.demo_stage = "NORMAL_OPERATION"
        
        operation_start = time.time()
        
        # Normal operasyon d√∂ng√ºs√º
        while time.time() - operation_start < duration:
            if self.emergency_triggered:
                print("\nüö® ACƒ∞L DURDURMA TETƒ∞KLENDƒ∞ - Normal operasyon durduruluyor!")
                break
            
            elapsed = time.time() - operation_start
            remaining = duration - elapsed
            
            # Motor test sinyalleri (g√ºvenli seviyede)
            motor_test_throttle = PWM_NEUTRAL + int(50 * math.sin(elapsed * 0.5))
            self.set_motor_throttle(motor_test_throttle)
            
            # Servo test sinyalleri
            servo_test_offset = int(30 * math.cos(elapsed * 0.3))
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL + servo_test_offset)
            
            print(f"  üìä Normal operasyon: {remaining:.0f}s | Motor: {motor_test_throttle} | Servo: {PWM_NEUTRAL + servo_test_offset}")
            print(f"      üîò ACƒ∞L DURDURMA butonuna basƒ±n! Buton basƒ±m: {self.button_press_count}")
            
            time.sleep(2)
        
        if not self.emergency_triggered:
            print("‚ö†Ô∏è Normal operasyon tamamlandƒ± - acil durdurma tetiklenmedi!")
            # Motorlarƒ± manuel durdur
            self.set_motor_throttle(PWM_NEUTRAL)
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL)
        
        return self.emergency_triggered
    
    def system_recovery_test(self):
        """Sistem kurtarma testi (acil durdurma sonrasƒ±)"""
        print("\nüîÑ Sƒ∞STEM KURTARMA TESTƒ∞")
        print("-"*50)
        print("üìã Acil durdurma sonrasƒ± sistemin yeniden ba≈ülatƒ±labilirliƒüi")
        
        self.demo_stage = "SYSTEM_RECOVERY"
        
        # Manuel sistem resetleme
        print("üîß Manuel sistem resetleme...")
        
        # GPIO power tekrar a√ß
        GPIO.output(SYSTEM_POWER_PIN, GPIO.HIGH)
        self.system_powered = True
        
        # LED'i normal modda yak
        GPIO.output(STATUS_LED_PIN, GPIO.HIGH)
        
        # Emergency flag temizle
        self.emergency_triggered = False
        self.emergency_button_pressed = False
        
        print("‚úÖ Sistem kurtarƒ±ldƒ± ve yeniden √ßalƒ±≈üƒ±r durumda!")
        
        # Kƒ±sa fonksiyon testi
        print("üß™ Sistem fonksiyon testi...")
        
        # MAVLink yeniden baƒülan
        if self.connect_pixhawk():
            # Test sinyalleri
            self.set_motor_throttle(PWM_NEUTRAL + 30)
            time.sleep(1)
            self.set_motor_throttle(PWM_NEUTRAL)
            
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL + 50)
            time.sleep(1)
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL)
            
            print("‚úÖ Sistem fonksiyon testi ba≈üarƒ±lƒ±!")
            return True
        else:
            print("‚ùå Sistem kurtarma ba≈üarƒ±sƒ±z!")
            return False
    
    def generate_emergency_report(self):
        """Acil durdurma testi raporu"""
        print("\n" + "="*70)
        print("üìã ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ DEMO RAPORU")
        print("="*70)
        
        demo_duration = time.time() - self.demo_start_time if self.demo_start_time else 0
        
        print(f"üìÖ Demo Tarihi: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è Toplam Demo S√ºresi: {demo_duration/60:.1f} dakika")
        print(f"üîò Toplam Buton Basƒ±m: {self.button_press_count}")
        
        print(f"\nüìä PERFORMANS METRƒ∞KLERƒ∞:")
        print("-"*50)
        print(f"üö® Acil Durdurma Tetiklenme: {'‚úÖ BA≈ûARILI' if self.emergency_triggered else '‚ùå BA≈ûARISIZ'}")
        
        if self.motor_stop_delay > 0:
            motor_response_status = "‚úÖ √áOK Hƒ∞ZLI" if self.motor_stop_delay < 0.5 else ("‚úÖ Hƒ∞ZLI" if self.motor_stop_delay < 1.0 else "‚ö†Ô∏è YAVAS")
            print(f"‚ö° Motor Durdurma S√ºresi: {self.motor_stop_delay:.3f}s ({motor_response_status})")
        
        if self.system_shutdown_delay > 0:
            shutdown_response_status = "‚úÖ √áOK Hƒ∞ZLI" if self.system_shutdown_delay < 1.0 else ("‚úÖ Hƒ∞ZLI" if self.system_shutdown_delay < 2.0 else "‚ö†Ô∏è YAVAS")
            print(f"‚è±Ô∏è Sistem Kapanma S√ºresi: {self.system_shutdown_delay:.3f}s ({shutdown_response_status})")
        
        print(f"üîå Sistem G√º√ß Kontrol√º: {'‚úÖ √áALI≈ûIYOR' if not self.system_powered else '‚ùå √áALI≈ûMIYOR'}")
        print(f"üîó MAVLink Baƒülantƒ± Kesimi: {'‚úÖ BA≈ûARILI' if not self.connected else '‚ùå BA≈ûARISIZ'}")
        
        # ≈ûartname deƒüerlendirmesi
        print(f"\nüéØ ≈ûARTNAME GEREKSƒ∞Nƒ∞MLERƒ∞:")
        print("-"*40)
        
        button_working = self.button_press_count > 0
        button_icon = "‚úÖ" if button_working else "‚ùå"
        print(f"  {button_icon} Acil Durdurma Butonu √áalƒ±≈ümasƒ±: {'√áALI≈ûIYOR' if button_working else '√áALI≈ûMIYOR'}")
        
        motor_stop = self.motors_active == False and self.motor_stop_delay > 0
        motor_icon = "‚úÖ" if motor_stop else "‚ùå"
        print(f"  {motor_icon} Motorlarƒ±n Durdurulmasƒ±: {'BA≈ûARILI' if motor_stop else 'BA≈ûARISIZ'}")
        
        system_shutdown = not self.system_powered and self.system_shutdown_delay > 0
        system_icon = "‚úÖ" if system_shutdown else "‚ùå"
        print(f"  {system_icon} Sistem Kapanmasƒ±: {'BA≈ûARILI' if system_shutdown else 'BA≈ûARISIZ'}")
        
        # Response time deƒüerlendirmesi
        fast_response = (self.motor_stop_delay < 1.0 and self.system_shutdown_delay < 2.0) if (self.motor_stop_delay > 0 and self.system_shutdown_delay > 0) else False
        response_icon = "‚úÖ" if fast_response else "‚ùå"
        print(f"  {response_icon} Hƒ±zlƒ± Tepki S√ºresi: {'BA≈ûARILI' if fast_response else 'BA≈ûARISIZ'}")
        
        # Safety compliance
        safety_compliance = button_working and motor_stop and system_shutdown and fast_response
        
        print(f"\nüèÜ GENEL SONU√á:")
        print("="*30)
        
        if safety_compliance:
            print("üéâ ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ TAM BA≈ûARI!")
            print("üõ°Ô∏è G√ºvenlik gereksinimleri kar≈üƒ±landƒ±!")
            print("üìπ Video √ßekimi i√ßin m√ºkemmel!")
        else:
            print("‚ùå ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ EKSƒ∞KLƒ∞KLER VAR!")
            missing_elements = []
            if not button_working:
                missing_elements.append("Buton √ßalƒ±≈ümasƒ±")
            if not motor_stop:
                missing_elements.append("Motor durdurma")
            if not system_shutdown:
                missing_elements.append("Sistem kapanma")  
            if not fast_response:
                missing_elements.append("Hƒ±zlƒ± tepki")
            print(f"üîß Eksikler: {', '.join(missing_elements)}")
        
        # Veri kaydet
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'demo_duration': demo_duration,
            'button_press_count': self.button_press_count,
            'emergency_triggered': self.emergency_triggered,
            'motor_stop_delay': self.motor_stop_delay,
            'system_shutdown_delay': self.system_shutdown_delay,
            'emergency_events': self.emergency_log,
            'telemetry_summary': {
                'total_samples': len(self.telemetry_data),
                'emergency_samples': len([d for d in self.telemetry_data if d.get('emergency_triggered', False)])
            },
            'safety_compliance': safety_compliance
        }
        
        with open(f'emergency_stop_demo_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json', 'w') as f:
            json.dump(report_data, f, indent=2)
        
        print(f"\nüíæ Demo raporu kaydedildi: emergency_stop_demo_*.json")
        
        return safety_compliance
    
    def run_full_emergency_demo(self):
        """Tam acil durdurma demo"""
        print("üö® TEKNOFEST Su Altƒ± Roket Aracƒ± - ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ DEMOsu")
        print("="*70)
        print("üìπ Video √ßekimi i√ßin acil durdurma sisteminin g√∂sterimi") 
        print("‚è±Ô∏è Tahmini s√ºre: 2-3 dakika")
        print("üéØ ≈ûartname: Butona basƒ±ldƒ±ƒüƒ±nda motorlar durmalƒ±, sistem kapanmalƒ±")
        
        if not self.connect_pixhawk():
            print("‚ùå Pixhawk baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z!")
            return False
        
        print("\n‚ö†Ô∏è G√úVENLƒ∞K UYARISI:")
        print("- Acil durdurma butonu √ßalƒ±≈üƒ±r durumda mƒ±?")
        print("- Test ortamƒ± g√ºvenli mi?")
        print("- Kameralar buton basƒ±mƒ±nƒ± kaydediyor mu?")
        print("- Sistem power LED'i g√∂r√ºl√ºyor mu?")
        
        ready = input("\n‚úÖ Acil durdurma demosu ba≈ülasƒ±n mƒ±? (y/n): ").lower()
        if ready != 'y':
            print("‚ùå Demo iptal edildi")
            return False
        
        self.demo_start_time = time.time()
        self.demo_active = True
        self.running = True
        
        # Monitoring thread ba≈ülat
        self.monitoring_thread = threading.Thread(target=self.monitoring_loop)
        self.monitoring_thread.daemon = True
        self.monitoring_thread.start()
        
        try:
            print("\nüö® ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ DEMOsu BA≈ûLADI!")
            
            # 1. Normal operasyon sim√ºlasyonu
            emergency_triggered = self.simulate_normal_operation(30)
            
            if not emergency_triggered:
                print("‚ö†Ô∏è Acil durdurma tetiklenmedi - demo ba≈üarƒ±sƒ±z!")
                return False
            
            # Acil durdurma i≈ülemi bitmesini bekle
            time.sleep(3)
            
            input("\n‚è∏Ô∏è Acil durdurma tamamlandƒ±! Sistem kurtarma testine ge√ßilsin mi? ENTER...")
            
            # 2. Sistem kurtarma testi
            recovery_success = self.system_recovery_test()
            
            # 3. Demo raporu
            success = self.generate_emergency_report()
            
            if success and recovery_success:
                print("\nüéâ ACƒ∞L DURDURMA Sƒ∞STEMƒ∞ DEMOsu BA≈ûARILI!")
                print("üìπ Video montaja hazƒ±r!")
            
            return success
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Demo kullanƒ±cƒ± tarafƒ±ndan durduruldu")
            # Acil durdurma sim√ºle et
            self.execute_emergency_stop()
            return False
        except Exception as e:
            print(f"\n‚ùå Demo hatasƒ±: {e}")
            return False
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Temizlik i≈ülemleri"""
        self.demo_active = False
        self.running = False
        
        print("\nüßπ Sistem temizleniyor...")
        
        # Motorlarƒ± g√ºvenli pozisyon
        if self.connected:
            self.set_motor_throttle(PWM_NEUTRAL)
            for channel in SERVO_CHANNELS:
                self.set_servo_position(channel, PWM_NEUTRAL)
        
        # GPIO temizlik
        try:
            GPIO.output(STATUS_LED_PIN, GPIO.LOW)
            GPIO.output(SYSTEM_POWER_PIN, GPIO.LOW)
            GPIO.cleanup()
            print("üîß GPIO temizlendi")
        except:
            pass
        
        # MAVLink baƒülantƒ± kapat
        if self.master:
            self.master.close()
            print("üîå MAVLink baƒülantƒ±sƒ± kapatƒ±ldƒ±")
        
        print("‚úÖ Sistem temizleme tamamlandƒ±")

def main():
    """Ana fonksiyon"""
    demo = EmergencyStopDemo()
    
    def signal_handler(sig, frame):
        print("\nüö® CTRL+C ile acil durdurma sim√ºlasyonu!")
        demo.emergency_button_callback(None)
        time.sleep(2)
        demo.cleanup()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        success = demo.run_full_emergency_demo()
        return 0 if success else 1
    except KeyboardInterrupt:
        return 1

if __name__ == "__main__":
    import math
    sys.exit(main()) 