#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MISSION 1 - Seyir ve Ba≈ülangƒ±√ß Noktasƒ±na D√∂n√º≈ü G√∂revi
ƒ∞lk 10m: 2m derinlik, sonrasƒ±: 3m derinlik, toplam 50m mesafe
180¬∞ d√∂n√º≈ü ve geri d√∂n√º≈ü, son olarak y√ºzeye √ßƒ±kƒ±≈ü
"""

import time
import math
from config import *
from utils import Timer, estimate_distance, format_time
from sensors import SensorManager
from control import StabilizationController, MotionController

class Mission1Controller:
    """G√∂rev 1 Ana Kontrol Sƒ±nƒ±fƒ±"""
    
    def __init__(self, mavlink_connection, system_status, logger):
        self.mavlink = mavlink_connection
        self.system_status = system_status
        self.logger = logger
        
        # Ana bile≈üenler
        self.sensors = SensorManager(mavlink_connection, logger)
        self.stabilizer = StabilizationController(mavlink_connection, self.sensors, logger)
        self.motion = MotionController(self.stabilizer, logger)
        
        # G√∂rev durumu
        self.mission_timer = Timer()
        self.phase_timer = Timer()
        self.current_phase = MissionPhase.WAITING
        self.mission_completed = False
        self.mission_success = False
        
        # Mesafe takibi
        self.total_distance_traveled = 0.0
        self.phase_distance = 0.0
        self.current_speed_pwm = MOTOR_STOP
        
        # Mesafe d√ºzeltmesi i√ßin yeni deƒüi≈ükenler
        self.phase1_actual_distance = 0.0  # Faz 1'de ger√ßekte gidilen mesafe
        self.phase2_actual_distance = 0.0  # Faz 2'de ger√ßekte gidilen mesafe
        
        self.logger.info("G√∂rev 1 kontrolc√ºs√º ba≈ülatƒ±ldƒ±")
        
    def initialize_mission(self):
        """G√∂rev ba≈ülangƒ±√ß hazƒ±rlƒ±klarƒ±"""
        self.logger.info("G√∂rev 1 ba≈ülangƒ±√ß hazƒ±rlƒ±klarƒ±...")
        
        try:
            # NOT: Sens√∂r kalibrasyonu main.py'de zaten yapƒ±ldƒ±, tekrar yapma!
            self.logger.info("Sens√∂rler ana kontrolc√ºde kalibre edildi")
                
            # Stabilizasyonu ba≈ülat
            self.stabilizer.enable_stabilization()
            
            # Servolarƒ± n√∂trle
            self.stabilizer.servo_controller.neutral_all_servos()
            
            # G√∂rev zamanlayƒ±cƒ±sƒ±nƒ± ba≈ülat
            self.mission_timer.start()
            
            self.logger.info("G√∂rev 1 hazƒ±rlƒ±klarƒ± tamamlandƒ±")
            return True
            
        except Exception as e:
            self.logger.error(f"G√∂rev ba≈ülangƒ±√ß hatasƒ±: {e}")
            return False
            
    def start_mission(self):
        """Ana g√∂rev d√∂ng√ºs√º"""
        self.logger.info("üöÄ G√ñREV 1 BA≈ûLIYOR!")
        self.system_status.set_phase(MissionPhase.PHASE_1)
        
        try:
            # Faz 1: ƒ∞lk 10 metre (2m derinlik)
            if not self._execute_phase_1():
                return False
                
            # Faz 2: Ana seyir (3m derinlik)  
            if not self._execute_phase_2():
                return False
                
            # Faz 3: 180¬∞ d√∂n√º≈ü
            if not self._execute_turning():
                return False
                
            # Faz 4: Geri d√∂n√º≈ü
            if not self._execute_return():
                return False
                
            # Faz 5: Y√ºzeye √ßƒ±kƒ±≈ü
            if not self._execute_surfacing():
                return False
                
            # G√∂rev ba≈üarƒ±lƒ±
            self.mission_completed = True
            self.mission_success = True
            self.system_status.set_phase(MissionPhase.COMPLETED)
            
            self.logger.info("üéâ G√ñREV 1 BA≈ûARIYLA TAMAMLANDI!")
            return True
            
        except Exception as e:
            self.logger.error(f"G√∂rev hatasƒ±: {e}")
            self._emergency_abort()
            return False
            
    def _execute_phase_1(self):
        """Faz 1: ƒ∞lk 10 metre - 2m derinlik"""
        self.logger.info("üìç FAZ 1: ƒ∞lk 10 metre (2m derinlik)")
        self.current_phase = MissionPhase.PHASE_1
        self.phase_timer.start()
        
        # Hedef deƒüerleri ayarla
        target_depth = TARGET_DEPTH_FIRST_10M
        target_distance = FIRST_PHASE_DISTANCE
        speed_pwm = get_speed_for_phase(MissionPhase.PHASE_1)
        
        self.stabilizer.set_target_depth(target_depth)
        self.current_speed_pwm = speed_pwm
        
        # Motoru ba≈ülat
        self.motion.forward(speed_pwm)
        
        self.phase_distance = 0.0
        last_distance_check = time.time()
        
        while True:
            # Buton kontrol√º
            button_action = self.system_status.check_start_button()
            if button_action == "stop":
                self.logger.info("Faz 1 kullanƒ±cƒ± tarafƒ±ndan durduruldu")
                return False
                
            # Stabilizasyonu g√ºncelle
            try:
                if not self.stabilizer.update_stabilization():
                    self.logger.warning("Stabilizasyon g√ºncellenemedi")
            except Exception as stab_error:
                self.logger.error(f"Faz 1 stabilizasyon hatasƒ±: {stab_error}")
                return False
                
            # Mesafe hesaplama
            current_time = time.time()
            if current_time - last_distance_check >= 1.0:  # Her saniye
                phase_time = self.phase_timer.elapsed()
                # G√ºvenli mesafe hesaplama - None kontrol√º
                if speed_pwm is not None and phase_time is not None:
                    estimated_distance = estimate_distance(speed_pwm, phase_time)
                    self.phase_distance = estimated_distance
                    self.total_distance_traveled = estimated_distance
                else:
                    estimated_distance = 0.0
                    self.logger.warning("Mesafe hesaplama i√ßin gerekli veriler eksik")
                
                # Durum raporu (D300 sens√∂r√ºnden g√ºvenli okuma)
                depth_result = self.sensors.depth.get_depth_safe("PHASE_1")
                current_depth, connection_status, fallback_used = depth_result
                
                # Faz 1'de D300 kesilirse acil durum
                if connection_status == "EMERGENCY_PHASE1":
                    self.logger.critical("üö® FAZ 1'DE D300 KESƒ∞NTƒ∞Sƒ∞ - ACƒ∞L DURUM!")
                    self._emergency_phase1_abort()
                    return False
                
                depth_str = f"{current_depth:.1f}m" if current_depth else "N/A"
                status_indicator = "‚ö†Ô∏è" if fallback_used else "‚úÖ"
                
                self.logger.info(f"Faz 1 - Mesafe: {estimated_distance:.1f}m/{target_distance}m, "
                               f"Derinlik: {depth_str}/{target_depth}m {status_indicator}")
                
                last_distance_check = current_time
                
            # Hedef mesafeye ula≈ütƒ±k mƒ±?
            if self.phase_distance >= target_distance:
                self.phase1_actual_distance = self.phase_distance  # Ger√ßek mesafeyi kaydet
                self.logger.info(f"‚úì Faz 1 tamamlandƒ±: {self.phase1_actual_distance:.1f}m")
                break
                
            # Zaman a≈üƒ±mƒ± kontrol√º
            if self.phase_timer.elapsed() > 120:  # 2 dakika maksimum
                self.logger.warning("Faz 1 zaman a≈üƒ±mƒ±!")
                break
                
            time.sleep(0.02)  # 50Hz
            
        return True
        
    def _execute_phase_2(self):
        """Faz 2: Ana seyir - 3m derinlik"""
        self.logger.info("üìç FAZ 2: Ana seyir (3m derinlik)")
        self.current_phase = MissionPhase.PHASE_2
        self.phase_timer.start()
        
        # Hedef deƒüerleri ayarla
        target_depth = TARGET_DEPTH_MAIN
        # G√ºvenli mesafe hesaplama - None kontrol√º
        phase1_distance = self.phase1_actual_distance if self.phase1_actual_distance is not None else 0.0
        remaining_distance = MISSION_DISTANCE - phase1_distance  # Ger√ßek Faz 1 mesafesini √ßƒ±kar
        speed_pwm = get_speed_for_phase(MissionPhase.PHASE_2)
        
        self.logger.info(f"Faz 2 hedefi: {remaining_distance:.1f}m (Faz 1 ger√ßek: {phase1_distance:.1f}m)")
        
        self.stabilizer.set_target_depth(target_depth)
        self.current_speed_pwm = speed_pwm
        
        # Hƒ±zƒ± artƒ±r
        self.motion.forward(speed_pwm)
        
        phase_2_distance = 0.0
        last_distance_check = time.time()
        
        while True:
            # Buton kontrol√º
            button_action = self.system_status.check_start_button()
            if button_action == "stop":
                self.logger.info("Faz 2 kullanƒ±cƒ± tarafƒ±ndan durduruldu")
                return False
                
            # Stabilizasyonu g√ºncelle
            if not self.stabilizer.update_stabilization():
                self.logger.warning("Stabilizasyon g√ºncellenemedi")
                
            # Mesafe hesaplama
            current_time = time.time()
            if current_time - last_distance_check >= 1.0:  # Her saniye
                phase_time = self.phase_timer.elapsed()
                # G√ºvenli mesafe hesaplama - None kontrol√º
                if speed_pwm is not None and phase_time is not None:
                    estimated_distance = estimate_distance(speed_pwm, phase_time)
                    phase_2_distance = estimated_distance
                    phase1_dist = self.phase1_actual_distance if self.phase1_actual_distance is not None else 0.0
                    self.total_distance_traveled = phase1_dist + phase_2_distance
                else:
                    estimated_distance = 0.0
                    phase_2_distance = 0.0
                    self.logger.warning("Faz 2 mesafe hesaplama i√ßin gerekli veriler eksik")
                
                # D300 g√ºvenli okuma (diƒüer fazlarda fallback devam eder)
                depth_result = self.sensors.depth.get_depth_safe("PHASE_2")
                current_depth, connection_status, fallback_used = depth_result
                
                depth_str = f"{current_depth:.1f}m" if current_depth else "N/A"
                status_indicator = "‚ö†Ô∏è" if fallback_used else "‚úÖ"
                
                self.logger.info(f"Faz 2 - Mesafe: {phase_2_distance:.1f}m/{remaining_distance:.1f}m, "
                               f"Derinlik: {depth_str}/{target_depth}m {status_indicator}")
                
                last_distance_check = current_time
                
            # Hedef mesafeye ula≈ütƒ±k mƒ±?
            if phase_2_distance >= remaining_distance:
                self.phase2_actual_distance = phase_2_distance  # Ger√ßek mesafeyi kaydet
                self.logger.info(f"‚úì Faz 2 tamamlandƒ±: {self.phase2_actual_distance:.1f}m")
                break
                
            # Zaman a≈üƒ±mƒ± kontrol√º
            if self.phase_timer.elapsed() > 180:  # 3 dakika maksimum
                self.logger.warning("Faz 2 zaman a≈üƒ±mƒ±!")
                break
                
            time.sleep(0.02)  # 50Hz
            
        return True
        
    def _execute_turning(self):
        """Faz 3: 180¬∞ d√∂n√º≈ü"""
        self.logger.info("üìç FAZ 3: 180¬∞ d√∂n√º≈ü")
        self.current_phase = MissionPhase.TURNING
        self.system_status.set_phase(MissionPhase.TURNING)
        
        # Motoru yava≈ülat/durdur
        self.motion.stop()
        time.sleep(2)  # Duraklamasƒ± i√ßin bekle
        
        # 180¬∞ d√∂n√º≈ü yap
        success = self.stabilizer.turn_180_degrees(timeout=45)
        
        if success:
            self.logger.info("‚úì 180¬∞ d√∂n√º≈ü tamamlandƒ±")
            return True
        else:
            self.logger.error("‚úó 180¬∞ d√∂n√º≈ü ba≈üarƒ±sƒ±z!")
            return False
            
    def _execute_return(self):
        """Faz 4: Geri d√∂n√º≈ü"""
        self.logger.info("üìç FAZ 4: Geri d√∂n√º≈ü")
        self.current_phase = MissionPhase.RETURN
        self.system_status.set_phase(MissionPhase.RETURN)
        self.phase_timer.start()
        
        # Hedef deƒüerleri ayarla
        target_depth = TARGET_DEPTH_MAIN
        # Ger√ßek gidilen mesafeyi kullan (phase1 + phase2) - None kontrol√º
        phase1_dist = self.phase1_actual_distance if self.phase1_actual_distance is not None else 0.0
        phase2_dist = self.phase2_actual_distance if self.phase2_actual_distance is not None else 0.0
        return_distance = phase1_dist + phase2_dist
        speed_pwm = get_speed_for_phase(MissionPhase.RETURN)
        
        self.logger.info(f"Geri d√∂n√º≈ü hedefi: {return_distance:.1f}m (Faz1: {phase1_dist:.1f}m + Faz2: {phase2_dist:.1f}m)")
        
        self.stabilizer.set_target_depth(target_depth)
        self.current_speed_pwm = speed_pwm
        
        # ƒ∞leri hareket ba≈ülat (180¬∞ d√∂nd√ºk, y√∂n ters)
        self.motion.forward(speed_pwm)
        
        return_distance_traveled = 0.0
        last_distance_check = time.time()
        
        while True:
            # Buton kontrol√º
            button_action = self.system_status.check_start_button()
            if button_action == "stop":
                self.logger.info("Geri d√∂n√º≈ü kullanƒ±cƒ± tarafƒ±ndan durduruldu")
                return False
                
            # Stabilizasyonu g√ºncelle
            if not self.stabilizer.update_stabilization():
                self.logger.warning("Stabilizasyon g√ºncellenemedi")
                
            # Mesafe hesaplama
            current_time = time.time()
            if current_time - last_distance_check >= 1.0:  # Her saniye
                phase_time = self.phase_timer.elapsed()
                # G√ºvenli mesafe hesaplama - None kontrol√º
                if speed_pwm is not None and phase_time is not None:
                    estimated_distance = estimate_distance(speed_pwm, phase_time)
                    return_distance_traveled = estimated_distance
                else:
                    estimated_distance = 0.0
                    return_distance_traveled = 0.0
                    self.logger.warning("Geri d√∂n√º≈ü mesafe hesaplama i√ßin gerekli veriler eksik")
                
                # Durum raporu (D300 sens√∂r√ºnden g√ºvenli okuma)
                depth_result = self.sensors.depth.get_depth_safe("RETURN")
                current_depth, connection_status, fallback_used = depth_result
                depth_str = f"{current_depth:.1f}m" if current_depth else "N/A"
                status_indicator = "‚ö†Ô∏è" if fallback_used else "‚úÖ"
                
                self.logger.info(f"Geri d√∂n√º≈ü - Mesafe: {return_distance_traveled:.1f}m/{return_distance:.1f}m, "
                               f"Derinlik: {depth_str}/{target_depth}m {status_indicator}")
                
                last_distance_check = current_time
                
            # Hedef mesafeye ula≈ütƒ±k mƒ±?
            if return_distance_traveled >= return_distance:
                self.logger.info(f"‚úì Geri d√∂n√º≈ü tamamlandƒ±: {return_distance_traveled:.1f}m")
                break
                
            # Zaman a≈üƒ±mƒ± kontrol√º
            if self.phase_timer.elapsed() > 180:  # 3 dakika maksimum
                self.logger.warning("Geri d√∂n√º≈ü zaman a≈üƒ±mƒ±!")
                break
                
            time.sleep(0.02)  # 50Hz
            
        return True
        
    def _execute_surfacing(self):
        """Faz 5: Y√ºzeye √ßƒ±kƒ±≈ü"""
        self.logger.info("üìç FAZ 5: Y√ºzeye √ßƒ±kƒ±≈ü")
        self.current_phase = MissionPhase.SURFACING
        self.system_status.set_phase(MissionPhase.SURFACING)
        
        # Stabilizasyonu deaktif et
        self.stabilizer.disable_stabilization()
        
        # Y√ºzeye √ßƒ±kƒ±≈ü kontrol√º
        success = self.stabilizer.surface_control(duration=15)
        
        if success:
            self.logger.info("‚úì Y√ºzeye √ßƒ±kƒ±≈ü tamamlandƒ±")
            return True
        else:
            self.logger.warning("Y√ºzeye √ßƒ±kƒ±≈ü problemi")
            return True  # Kritik hata deƒüil
            
    def _emergency_phase1_abort(self):
        """Faz 1'de D300 kesilmesi durumunda acil durum prosed√ºr√º"""
        self.logger.critical("üö® FAZ 1 ACƒ∞L DURUM: D300 sens√∂r kesildi!")
        
        try:
            # 1. Motoru durdur
            self.motion.stop()
            self.logger.info("‚úì Motor durduruldu")
            
            # 2. 180¬∞ yaw verip kendini kapat
            self.logger.info("Acil durum 180¬∞ d√∂n√º≈ü ba≈ülatƒ±lƒ±yor...")
            emergency_turn_success = self.stabilizer.emergency_180_turn(timeout=30)
            
            if emergency_turn_success:
                self.logger.info("‚úì Acil durum d√∂n√º≈ü tamamlandƒ±")
            else:
                self.logger.warning("‚ö†Ô∏è Acil durum d√∂n√º≈ü ba≈üarƒ±sƒ±z")
            
            # 3. Stabilizasyonu durdur
            self.stabilizer.disable_stabilization()
            
            # 4. Sistemde acil durum i≈üaretle
            self.system_status.emergency_stop()
            
            # 5. G√∂rev ba≈üarƒ±sƒ±z olarak i≈üaretle
            self.mission_completed = True
            self.mission_success = False
            self.current_phase = MissionPhase.EMERGENCY
            
            self.logger.critical("‚ùå G√ñREV 1 ACƒ∞L DURUM NEDENƒ∞YLE SONLANDIRILDI")
            
        except Exception as e:
            self.logger.error(f"Acil durum prosed√ºr√º hatasƒ±: {e}")
            
    def _emergency_abort(self):
        """Genel acil durum prosed√ºr√º"""
        self.logger.error("üö® ACƒ∞L DURUM - G√∂rev iptal ediliyor!")
        
        try:
            # Motoru durdur
            self.motion.stop()
            
            # Stabilizasyonu durdur
            self.stabilizer.disable_stabilization()
            
            # Sistem durumunu ayarla
            self.system_status.emergency_stop()
            
            # G√∂rev durumunu ayarla
            self.mission_completed = True
            self.mission_success = False
            self.current_phase = MissionPhase.EMERGENCY
            
        except Exception as e:
            self.logger.error(f"Acil durum prosed√ºr√º hatasƒ±: {e}")
            
    def get_mission_status(self):
        """G√∂rev durumu raporu"""
        status = {
            'phase': self.current_phase,
            'mission_time': self.mission_timer.elapsed() if self.mission_timer.is_running() else 0,
            'phase_time': self.phase_timer.elapsed() if self.phase_timer.is_running() else 0,
            'total_distance': self.total_distance_traveled if self.total_distance_traveled is not None else 0.0,
            'phase_distance': self.phase_distance if self.phase_distance is not None else 0.0,
            'completed': self.mission_completed,
            'success': self.mission_success,
            'current_speed': self.current_speed_pwm if self.current_speed_pwm is not None else MOTOR_STOP
        }
        
        # Sens√∂r durumu ekle
        try:
            sensor_data = self.sensors.get_all_sensor_data()
            if sensor_data and sensor_data['depth'] and sensor_data['depth']['is_valid']:
                depth_val = sensor_data['depth']['depth_m']
                if depth_val is not None:
                    status['current_depth'] = depth_val
            if sensor_data and sensor_data['attitude']:
                heading_val = sensor_data['attitude'].get('yaw_relative_deg')
                if heading_val is not None:
                    status['current_heading'] = heading_val
        except Exception as e:
            self.logger.warning(f"Sens√∂r durumu alma hatasƒ±: {e}")
            
        return status
        
    def log_mission_status(self):
        """G√∂rev durumunu logla"""
        status = self.get_mission_status()
        
        mission_time_str = format_time(status['mission_time'])
        phase_time_str = format_time(status['phase_time'])
        
        self.logger.info(f"G√∂rev Durumu - Faz: {status['phase']}, "
                        f"S√ºre: {mission_time_str}, "
                        f"Mesafe: {status['total_distance']:.1f}m")
                        
        if 'current_depth' in status and status['current_depth'] is not None:
            self.logger.info(f"Derinlik: {status['current_depth']:.2f}m")
            
        if 'current_heading' in status and status['current_heading'] is not None:
            self.logger.info(f"Heading: {status['current_heading']:.1f}¬∞")
            
    def cleanup(self):
        """G√∂rev temizliƒüi"""
        self.logger.info("G√∂rev 1 temizleniyor...")
        
        try:
            # Stabilizasyonu durdur
            self.stabilizer.disable_stabilization()
            
            # Motoru durdur
            self.motion.stop()
            
            # Zamanlayƒ±cƒ±larƒ± durdur
            if self.mission_timer.is_running():
                self.mission_timer.pause()
            if self.phase_timer.is_running():
                self.phase_timer.pause()
                
            self.logger.info("G√∂rev 1 temizliƒüi tamamlandƒ±")
            
        except Exception as e:
            self.logger.error(f"G√∂rev 1 temizlik hatasƒ±: {e}")

def run_mission_1(mavlink_connection, system_status, logger):
    """G√∂rev 1'i √ßalƒ±≈ütƒ±r (dƒ±≈ü aray√ºz fonksiyonu)"""
    mission = Mission1Controller(mavlink_connection, system_status, logger)
    
    try:
        # G√∂revi ba≈ülat
        if not mission.initialize_mission():
            logger.error("G√∂rev 1 ba≈ülatma ba≈üarƒ±sƒ±z!")
            return False
            
        # Ana g√∂rev d√∂ng√ºs√º
        success = mission.start_mission()
        
        # Sonu√ß raporu
        status = mission.get_mission_status()
        mission_time = format_time(status['mission_time'])
        
        if success:
            logger.info(f"‚úÖ G√ñREV 1 BA≈ûARILI! S√ºre: {mission_time}, Mesafe: {status['total_distance']:.1f}m")
        else:
            logger.error(f"‚ùå G√ñREV 1 BA≈ûARISIZ! S√ºre: {mission_time}")
            
        return success
        
    except Exception as e:
        logger.error(f"G√∂rev 1 √ßalƒ±≈ütƒ±rma hatasƒ±: {e}")
        return False
        
    finally:
        mission.cleanup()
