"""
TEKNOFEST 2025 Su Altƒ± Roket Aracƒ±
+ Wing Servo Kontrol Test Scripti

Bu script + Wing konfig√ºrasyonu i√ßin servo kontrollerini test eder.
Fin isimleri: √úst, Alt, Sol, Saƒü
"""

import os
import sys
import time
import signal

# Proje dizinini path'e ekle
project_root = os.path.join(os.path.dirname(__file__), '../..')
sys.path.append(project_root)

from common.mavlink_helper import MAVLinkController
from common.servo_controller import ServoController

# + Wing konfig√ºrasyonunu import et
import importlib.util
plus_wing_path = os.path.join(project_root, '+_wing', 'hardware_pinmap.py')
spec = importlib.util.spec_from_file_location("plus_wing_pinmap", plus_wing_path)
plus_wing_config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(plus_wing_config)

class PlusWingServoTester:
    """+ Wing servo test sƒ±nƒ±fƒ±"""
    
    def __init__(self):
        self.running = True
        self.mav = None
        self.servo_controller = None
        
        # Signal handler
        signal.signal(signal.SIGINT, self.signal_handler)
        
        # Baƒülantƒ± ayarlarƒ±
        self.connection_string = plus_wing_config.PixhawkConfig.MAVLINK_PORT
        self.baud_rate = plus_wing_config.PixhawkConfig.MAVLINK_BAUD
    
    def signal_handler(self, sig, frame):
        """Ctrl+C ile g√ºvenli √ßƒ±kƒ±≈ü"""
        print("\n\nTest durduruluyor...")
        self.running = False
        if self.servo_controller:
            self.servo_controller.emergency_stop()
        if self.mav:
            self.mav.disconnect()
        sys.exit(0)
    
    def setup_connections(self):
        """MAVLink ve servo kontrolc√ºs√ºn√º ayarla"""
        print("="*60)
        print("+ WING SERVO KONTROL TESƒ∞")
        print("="*60)
        
        # MAVLink baƒülantƒ±sƒ±
        self.mav = MAVLinkController(self.connection_string, self.baud_rate)
        if not self.mav.connect():
            print("‚ùå Pixhawk baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z!")
            return False
        
        # Servo kontrolc√ºs√º
        self.servo_controller = ServoController(self.mav, plus_wing_config.FinControlConfig.FINS)
        print("‚úÖ Servo kontrolc√ºs√º hazƒ±rlandƒ±")
        
        print("\n+ Wing Fin Konfig√ºrasyonu:")
        for fin_name, config in plus_wing_config.FinControlConfig.FINS.items():
            print(f"  {config['name']} (AUX {config['aux_port']})")
        
        print("-"*60)
        return True
    
    def test_individual_servos(self):
        """Her servoyu ayrƒ± ayrƒ± test et"""
        print("\nTEKƒ∞L SERVO TESTLERƒ∞")
        print("Her servo ayrƒ± ayrƒ± test ediliyor...")
        print("-"*60)
        
        for fin_name, config in plus_wing_config.FinControlConfig.FINS.items():
            if not self.running:
                break
                
            print(f"\nüîß {config['name']} Test Ediliyor...")
            
            # Test dizisi: N√∂tr -> Min -> N√∂tr -> Max -> N√∂tr
            test_positions = [
                (plus_wing_config.PixhawkConfig.SERVO_NEUTRAL, "N√∂tr Pozisyon"),
                (plus_wing_config.PixhawkConfig.SERVO_MIN, "Minimum Pozisyon"),
                (plus_wing_config.PixhawkConfig.SERVO_NEUTRAL, "N√∂tr Pozisyon"),
                (plus_wing_config.PixhawkConfig.SERVO_MAX, "Maksimum Pozisyon"),
                (plus_wing_config.PixhawkConfig.SERVO_NEUTRAL, "N√∂tr Pozisyon")
            ]
            
            for pwm_value, position_desc in test_positions:
                print(f"  ‚Üí {position_desc} (PWM: {pwm_value})")
                self.servo_controller.set_servo_position(fin_name, pwm_value)
                time.sleep(1.5)  # Her pozisyon i√ßin bekleme
            
            print(f"‚úÖ {config['name']} testi tamamlandƒ±")
            time.sleep(0.5)
        
        print("\n‚úÖ Tekil servo testleri tamamlandƒ±")
    
    def test_movement_commands(self):
        """+ Wing hareket komutlarƒ±nƒ± test et"""
        print("\n+ WING HAREKET KOMUTLARI TESƒ∞")
        print("Ortogonal fin hareketleri test ediliyor...")
        print("-"*60)
        
        # Test edilecek hareket komutlarƒ±
        movements_to_test = [
            ("n√∂tr", "T√ºm finler n√∂tr"),
            ("yukarƒ±", "Yukarƒ± hareket (√ºst fin max, alt fin min)"),
            ("n√∂tr", "N√∂tr pozisyon"),
            ("a≈üaƒüƒ±", "A≈üaƒüƒ± hareket (√ºst fin min, alt fin max)"), 
            ("n√∂tr", "N√∂tr pozisyon"),
            ("sola", "Sola hareket (sol fin max, saƒü fin min)"),
            ("n√∂tr", "N√∂tr pozisyon"),
            ("saƒüa", "Saƒüa hareket (sol fin min, saƒü fin max)"),
            ("n√∂tr", "Son n√∂tr pozisyon")
        ]
        
        for movement, description in movements_to_test:
            if not self.running:
                break
                
            print(f"\nüéØ {description}")
            
            # Hareket komutunu al ve uygula
            movement_cmd = plus_wing_config.FinControlConfig.MOVEMENT_COMMANDS.get(movement)
            if movement_cmd:
                print("   Fin PWM deƒüerleri:")
                for fin_name, pwm_value in movement_cmd.items():
                    fin_desc = plus_wing_config.FinControlConfig.FINS[fin_name]['name']
                    print(f"   ‚Ä¢ {fin_desc}: {pwm_value}")
                
                self.servo_controller.execute_movement_command(movement_cmd)
            else:
                print(f"   ‚ö†Ô∏è Hareket komutu bulunamadƒ±: {movement}")
            
            time.sleep(2.5)  # Her hareket i√ßin bekleme
        
        print("\n‚úÖ Hareket komutlarƒ± testi tamamlandƒ±")
    
    def test_axis_isolation(self):
        """Eksen izolasyon testleri (+ Wing'in avantajƒ±)"""
        print("\nEKSEN ƒ∞ZOLASYON TESTLERƒ∞")
        print("+ Wing konfig√ºrasyonunun eksen ayrƒ±mƒ± test ediliyor...")
        print("-"*60)
        
        isolation_tests = [
            {
                "name": "Yalnƒ±z Pitch Kontrol√º",
                "description": "Sadece √ºst-alt finler hareket ediyor",
                "test_sequence": [
                    ("Pitch Up", {"upper": plus_wing_config.PixhawkConfig.SERVO_MAX, 
                                 "lower": plus_wing_config.PixhawkConfig.SERVO_MIN,
                                 "left": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                 "right": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL}),
                    ("Pitch Down", {"upper": plus_wing_config.PixhawkConfig.SERVO_MIN,
                                   "lower": plus_wing_config.PixhawkConfig.SERVO_MAX,
                                   "left": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                   "right": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL}),
                    ("Pitch Neutral", {"upper": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                      "lower": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                      "left": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                      "right": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL})
                ]
            },
            {
                "name": "Yalnƒ±z Roll Kontrol√º",
                "description": "Sadece sol-saƒü finler hareket ediyor",
                "test_sequence": [
                    ("Roll Left", {"upper": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                  "lower": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                  "left": plus_wing_config.PixhawkConfig.SERVO_MAX,
                                  "right": plus_wing_config.PixhawkConfig.SERVO_MIN}),
                    ("Roll Right", {"upper": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                   "lower": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                   "left": plus_wing_config.PixhawkConfig.SERVO_MIN,
                                   "right": plus_wing_config.PixhawkConfig.SERVO_MAX}),
                    ("Roll Neutral", {"upper": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                     "lower": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                     "left": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL,
                                     "right": plus_wing_config.PixhawkConfig.SERVO_NEUTRAL})
                ]
            }
        ]
        
        for test_group in isolation_tests:
            if not self.running:
                break
                
            print(f"\nüé™ {test_group['name']}")
            print(f"   {test_group['description']}")
            
            for movement_name, servo_positions in test_group['test_sequence']:
                print(f"   ‚Üí {movement_name}")
                self.servo_controller.set_multiple_servos(servo_positions)
                time.sleep(2.0)
            
            print(f"   ‚úÖ {test_group['name']} tamamlandƒ±")
            time.sleep(0.5)
        
        print("\n‚úÖ Eksen izolasyon testleri tamamlandƒ±")
    
    def test_precision_control(self):
        """Hassas kontrol testleri"""
        print("\nHASSAS KONTROL TESTLERƒ∞")
        print("+ Wing'in hassas kontrol kabiliyeti test ediliyor...")
        print("-"*60)
        
        # Hassas PWM deƒüerleri ile test
        precision_steps = [1500, 1510, 1520, 1530, 1540, 1550, 1540, 1530, 1520, 1510, 1500,
                          1490, 1480, 1470, 1460, 1450, 1460, 1470, 1480, 1490, 1500]
        
        for fin_name, config in plus_wing_config.FinControlConfig.FINS.items():
            if not self.running:
                break
                
            print(f"\nüéØ {config['name']} Hassas Kontrol")
            print(f"   PWM deƒüerleri: {min(precision_steps)} - {max(precision_steps)}")
            
            for i, pwm_value in enumerate(precision_steps):
                self.servo_controller.set_servo_position(fin_name, pwm_value)
                print(f"   Step {i+1:2d}: PWM {pwm_value}", end='\r')
                time.sleep(0.3)
            
            print(f"\n   ‚úÖ {config['name']} hassas kontrol tamamlandƒ±")
            time.sleep(0.5)
        
        print("\n‚úÖ Hassas kontrol testleri tamamlandƒ±")
    
    def test_plus_wing_advantages(self):
        """+ Wing avantajlarƒ± demonstrasyonu"""
        print("\n+ WING AVANTAJLARI DEMONSTRASYONu")
        print("+ Wing konfig√ºrasyonunun avantajlarƒ± g√∂steriliyor...")
        print("-"*60)
        
        advantages_demo = [
            {
                "name": "Baƒüƒ±msƒ±z Eksen Kontrol√º",
                "description": "Pitch ve roll hareketleri birbirini etkilemiyor",
                "demo": [
                    ("Sadece Pitch", {"upper": 1600, "lower": 1400, "left": 1500, "right": 1500}),
                    ("Pitch + Roll", {"upper": 1600, "lower": 1400, "left": 1600, "right": 1400}),
                    ("Sadece Roll", {"upper": 1500, "lower": 1500, "left": 1600, "right": 1400}),
                    ("N√∂tr", {"upper": 1500, "lower": 1500, "left": 1500, "right": 1500})
                ]
            },
            {
                "name": "Stabilite Avantajƒ±",
                "description": "D√∂rt nokta kontrol√º ile y√ºksek stabilite",
                "demo": [
                    ("K√º√ß√ºk D√ºzeltme", {"upper": 1520, "lower": 1480, "left": 1480, "right": 1520}),
                    ("Orta D√ºzeltme", {"upper": 1550, "lower": 1450, "left": 1450, "right": 1550}),
                    ("B√ºy√ºk D√ºzeltme", {"upper": 1600, "lower": 1400, "left": 1400, "right": 1600}),
                    ("Geri D√ºzeltme", {"upper": 1500, "lower": 1500, "left": 1500, "right": 1500})
                ]
            }
        ]
        
        for demo_group in advantages_demo:
            if not self.running:
                break
                
            print(f"\nüåü {demo_group['name']}")
            print(f"   {demo_group['description']}")
            
            for demo_name, servo_positions in demo_group['demo']:
                print(f"   ‚Üí {demo_name}")
                self.servo_controller.set_multiple_servos(servo_positions)
                time.sleep(2.0)
            
            print(f"   ‚úÖ {demo_group['name']} tamamlandƒ±")
            time.sleep(0.5)
        
        print("\n‚úÖ + Wing avantajlarƒ± demonstrasyonu tamamlandƒ±")
    
    def test_response_characteristics(self):
        """+ Wing yanƒ±t karakteristikleri"""
        print("\n+ WING YANIT KARAKTERƒ∞STƒ∞KLERƒ∞")
        print("Servo yanƒ±t s√ºreleri ve karakteristikleri √∂l√ß√ºl√ºyor...")
        print("-"*60)
        
        # Yanƒ±t s√ºresi testi
        for fin_name, config in plus_wing_config.FinControlConfig.FINS.items():
            if not self.running:
                break
                
            print(f"\n‚ö° {config['name']} Yanƒ±t Karakteristiƒüi")
            
            # Step yanƒ±t testi
            step_responses = []
            for i in range(5):
                start_pwm = plus_wing_config.PixhawkConfig.SERVO_MIN if i % 2 == 0 else plus_wing_config.PixhawkConfig.SERVO_MAX
                end_pwm = plus_wing_config.PixhawkConfig.SERVO_MAX if i % 2 == 0 else plus_wing_config.PixhawkConfig.SERVO_MIN
                
                start_time = time.time()
                self.servo_controller.set_servo_position(fin_name, end_pwm)
                response_time = time.time() - start_time
                
                step_responses.append(response_time)
                print(f"   Test {i+1}: {start_pwm} ‚Üí {end_pwm}, {response_time:.3f}s")
                time.sleep(0.5)
            
            avg_response = sum(step_responses) / len(step_responses)
            print(f"   Ortalama yanƒ±t s√ºresi: {avg_response:.3f}s")
            
            # N√∂tre getir
            self.servo_controller.set_servo_position(fin_name, plus_wing_config.PixhawkConfig.SERVO_NEUTRAL)
            print(f"   ‚úÖ {config['name']} yanƒ±t testi tamamlandƒ±")
            time.sleep(0.5)
        
        print("\n‚úÖ Yanƒ±t karakteristikleri testleri tamamlandƒ±")
    
    def run_full_test(self):
        """Tam test senaryosu"""
        try:
            # Baƒülantƒ±larƒ± ayarla
            if not self.setup_connections():
                return
            
            # Tekil servo testleri
            self.test_individual_servos()
            
            if not self.running:
                return
            
            # Hareket komutlarƒ± testi
            self.test_movement_commands()
            
            if not self.running:
                return
            
            # Eksen izolasyon testleri (+ Wing'e √∂zel)
            self.test_axis_isolation()
            
            if not self.running:
                return
            
            # Hassas kontrol testleri
            self.test_precision_control()
            
            if not self.running:
                return
            
            # + Wing avantajlarƒ± demonstrasyonu
            self.test_plus_wing_advantages()
            
            if not self.running:
                return
            
            # Yanƒ±t karakteristikleri
            self.test_response_characteristics()
            
            print("\n" + "="*60)
            print("üéâ + WING SERVO TESTLERƒ∞ BA≈ûARIYLA TAMAMLANDI!")
            print("="*60)
            
        except Exception as e:
            print(f"\n‚ùå TEST HATASI: {e}")
            
        finally:
            # G√ºvenlik: T√ºm servolar n√∂tr
            if self.servo_controller:
                self.servo_controller.emergency_stop()
            if self.mav:
                self.mav.disconnect()

def main():
    """Ana test fonksiyonu"""
    tester = PlusWingServoTester()
    
    try:
        tester.run_full_test()
    except KeyboardInterrupt:
        print("\nTest kullanƒ±cƒ± tarafƒ±ndan durduruldu")
    except Exception as e:
        print(f"Beklenmeyen hata: {e}")

if __name__ == "__main__":
    main()
